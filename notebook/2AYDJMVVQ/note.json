{
  "paragraphs": [
    {
      "text": "%dep \nz.reset()\nz.load(\"joda-time:joda-time:2.8.2\")\nz.load(\"org.joda:joda-convert:1.7\")",
      "dateUpdated": "Aug 22, 2015 11:16:42 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1439827242454_1171805612",
      "id": "20150817-160042_309573164",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Must be used before SparkInterpreter (%spark) initialized"
      },
      "dateCreated": "Aug 17, 2015 4:00:42 PM",
      "dateStarted": "Aug 22, 2015 10:45:44 PM",
      "dateFinished": "Aug 22, 2015 10:45:46 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md #Analyzing Access Logs\nCheck my original blog post: [Vagrant + Spark + Zeppelin a Toolbox to the Data Analyst](/2015/08/23/vagrant-spark-zeppelin-a-toolbox-to-the-data-analyst/)",
      "dateUpdated": "Aug 22, 2015 11:16:43 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1439827160116_269863890",
      "id": "20150817-155920_280220446",
      "result": {
        "code": "SUCCESS",
        "type": "HTML",
        "msg": "\u003ch1\u003eAnalyzing Access Logs\u003c/h1\u003e\n\u003cp\u003eCheck my original blog post: \u003ca href\u003d\"/2015/08/23/vagrant-spark-zeppelin-a-toolbox-to-the-data-analyst/\"\u003eVagrant + Spark + Zeppelin a Toolbox to the Data Analyst\u003c/a\u003e\u003c/p\u003e\n"
      },
      "dateCreated": "Aug 17, 2015 3:59:20 PM",
      "dateStarted": "Aug 22, 2015 10:45:44 PM",
      "dateFinished": "Aug 22, 2015 10:45:46 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import java.net.URI\n\nimport org.joda.time.DateTime\nimport org.joda.time.format.DateTimeFormat\n\n// Case class to keep each record and their fields name/type \n  case class AccessLog(remoteIP: String, datetime: org.joda.time.DateTime, method: String, url: java.net.URI,\n    responseCode: String, size: Long, httpReferer: java.net.URI, agent: String)\n\n// Simple REGEX parser to extract fields from AccessLog file\n  def parseLog(line: String) \u003d {\n    def convertToDate(dateAsString: String): DateTime \u003d {\n      // 02/Jan/2003:02:06:41 -0700\n      val dtf \u003d DateTimeFormat.forPattern(\"dd/MMM/yyyy:HH:mm:ss Z\")\n      dtf.parseDateTime(dateAsString)\n    }\n\n    import scala.util.matching.Regex\n\n    val pattern \u003d new Regex( \"\"\"^([0-9\\.]+) - - \\[(.*?)\\] \"(.*?) (.*?) HTTP\\/.*?\" ([0-9]+) ([0-9]+) \"(.*?)\" \"(.*?)\"$\"\"\",\n      \"remoteIP\", \"datetime\", \"method\", \"url\", \"responseCode\", \"size\", \"httpReferer\", \"agent\")\n\n    val result \u003d pattern.findFirstMatchIn(line)\n\n    // if there is no match, return no record\n    if (result.isEmpty)\n      None\n\n    else {\n      try {\n        val m \u003d result.get\n\n        Some(\n          AccessLog(\n            remoteIP \u003d m.group(\"remoteIP\"),\n            datetime \u003d convertToDate(m.group(\"datetime\")),\n            method \u003d m.group(\"method\"),\n            url \u003d new URI(m.group(\"url\")),\n            responseCode \u003d m.group(\"responseCode\"),\n            size \u003d m.group(\"size\").toLong,\n            httpReferer \u003d new URI(m.group(\"httpReferer\")),\n            agent \u003d m.group(\"agent\")\n          )\n        )\n\n      } catch {\n          \n        // If something goes wrong, just return no record\n        // on a production env you should log and check the level of\n        // errors with Accumulators\n        // http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.Accumulator\n        case e: Exception \u003d\u003e None\n      }\n    }\n  }",
      "dateUpdated": "Aug 22, 2015 11:16:47 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1439828032096_271223929",
      "id": "20150817-161352_2096077564",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "import java.net.URI\nimport org.joda.time.DateTime\nimport org.joda.time.format.DateTimeFormat\ndefined class AccessLog\nparseLog: (line: String)Option[AccessLog]\n"
      },
      "dateCreated": "Aug 17, 2015 4:13:52 PM",
      "dateStarted": "Aug 22, 2015 10:45:44 PM",
      "dateFinished": "Aug 22, 2015 10:45:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// read all files from the filesystem\n// could be HDFS or S3 as well\nval logs \u003d sc.textFile(\"/opt/dataset/*.log.gz\")\n\n// Map each line (String) and parse with our function\nval logRecords \u003d logs.map(parseLog).\nflatMap(e \u003d\u003e e). // Use flatMap to remove empty records (None)\ncache // Cache this RDD as it will be used several times\n\n",
      "dateUpdated": "Aug 22, 2015 11:16:50 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1439841526633_2077062511",
      "id": "20150817-195846_1569515141",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "logs: org.apache.spark.rdd.RDD[String] \u003d MapPartitionsRDD[1] at textFile at \u003cconsole\u003e:28\nlogRecords: org.apache.spark.rdd.RDD[AccessLog] \u003d MapPartitionsRDD[3] at flatMap at \u003cconsole\u003e:35\n"
      },
      "dateCreated": "Aug 17, 2015 7:58:46 PM",
      "dateStarted": "Aug 22, 2015 10:45:47 PM",
      "dateFinished": "Aug 22, 2015 10:45:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Extract the httpReferer host\nval results \u003d logRecords.map(r \u003d\u003e (r.httpReferer.getHost, 1)).\n// Filter those lines without httpReferer\nfilter(_._1 !\u003d null).\n// Sum records with same httpReferer, resulting a tupple like: (httpReferer, quantity)\nreduceByKey(_+_).\n// Invert the tuple (quantity, httpReferer)\nmap(_.swap).\n// Calculate Top 10\ntop(10)\n\n// Print results as table\n// so Zeppelin can show the results as charts\nprintln(\"%table\\tdomain\\tcount\")\nresults.foreach(r \u003d\u003e println(r._2 + \"\\t\" + r._1))",
      "dateUpdated": "Aug 22, 2015 11:16:52 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "multiBarChart",
          "height": 234.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "domain",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "yAxis": {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1439841676518_224081683",
      "id": "20150817-200116_625479689",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "domain\tcount\nwww.waxy.org\t561939\nwww.google.com\t126799\nsearch.yahoo.com\t63361\nsearch.msn.com\t61847\nwww.teamabuse.com\t37159\nwaxy.org\t18329\nwww.google.ca\t17484\n50.lycos.com\t14260\nimages.google.com\t11656\nwww.bitflood.org\t9398\n"
      },
      "dateCreated": "Aug 17, 2015 8:01:16 PM",
      "dateStarted": "Aug 22, 2015 10:45:51 PM",
      "dateFinished": "Aug 22, 2015 10:46:26 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Another case class to access the fields, and convert to DataFrame\ncase class Record(remoteIP:String, datetime:Long, url:String)\n\n// Create the new Record and convert to DataFrames\nval logRecodsDF \u003d logRecords.map( r\u003d\u003e Record(r.remoteIP, r.datetime.getMillis/1000, r.url.toString) ).toDF\n\n// Register the DF as TempTable so you can run SQL Queries\nlogRecodsDF.registerTempTable(\"logs\")",
      "dateUpdated": "Aug 22, 2015 11:16:55 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1439841924063_1255930616",
      "id": "20150817-200524_50575152",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "defined class Record\nlogRecodsDF: org.apache.spark.sql.DataFrame \u003d [remoteIP: string, datetime: bigint, url: string]\n"
      },
      "dateCreated": "Aug 17, 2015 8:05:24 PM",
      "dateStarted": "Aug 22, 2015 10:45:52 PM",
      "dateFinished": "Aug 22, 2015 10:46:28 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql SELECT from_unixtime(datetime, \u0027yyyy-MM-dd\u0027) AS dt, COUNT(*) as count \nFROM logs\nWHERE datetime \u003e\u003d 1049932800 -- 2003-04-10\nGROUP BY from_unixtime(datetime, \u0027yyyy-MM-dd\u0027)\nORDER BY dt\n",
      "dateUpdated": "Aug 22, 2015 11:16:58 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "lineChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "dt",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "dt",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1439863862677_2146849855",
      "id": "20150818-021102_2042086141",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "dt\tcount\n2003-04-10\t2887\n2003-04-11\t3708\n2003-04-12\t4019\n2003-04-13\t3577\n2003-04-14\t4329\n2003-04-15\t5667\n2003-04-16\t4641\n2003-04-17\t7551\n2003-04-18\t4461\n2003-04-19\t3156\n2003-04-20\t2996\n2003-04-21\t3981\n2003-04-22\t2953\n2003-04-23\t4671\n2003-04-24\t4112\n2003-04-25\t3719\n2003-04-26\t3155\n2003-04-27\t2993\n2003-04-28\t3243\n2003-04-29\t3393\n2003-04-30\t12876\n2003-05-01\t15430\n2003-06-01\t26428\n2003-06-02\t42074\n2003-06-03\t40205\n2003-06-04\t35653\n2003-06-05\t35637\n2003-06-06\t39829\n2003-06-07\t21977\n2003-06-08\t17474\n2003-06-09\t21580\n2003-06-10\t21320\n2003-06-11\t22397\n2003-06-12\t21467\n2003-06-13\t20259\n2003-06-14\t14644\n2003-06-15\t14280\n2003-06-16\t17892\n2003-06-17\t16365\n2003-06-18\t15031\n2003-06-19\t17939\n2003-06-20\t17072\n2003-06-21\t11735\n2003-06-22\t13130\n2003-06-23\t14849\n2003-06-24\t14125\n2003-06-25\t13860\n2003-06-26\t13249\n2003-06-27\t13165\n2003-06-28\t10485\n2003-06-29\t9713\n2003-06-30\t11902\n2003-07-01\t12044\n2003-07-02\t13006\n2003-07-03\t12441\n2003-07-04\t10933\n2003-07-05\t9542\n2003-07-06\t9641\n2003-07-07\t14629\n2003-07-08\t13014\n2003-07-09\t11586\n2003-07-10\t13501\n2003-07-11\t14426\n2003-07-12\t9536\n2003-07-13\t8944\n2003-07-14\t11933\n2003-07-15\t29487\n2003-07-16\t15923\n2003-07-17\t16165\n2003-07-18\t11493\n2003-07-19\t8896\n2003-07-20\t8566\n2003-07-21\t18395\n2003-07-22\t16211\n2003-07-23\t19238\n2003-07-24\t27495\n2003-07-25\t31316\n2003-07-26\t17002\n2003-07-27\t13018\n2003-07-28\t24203\n2003-07-29\t30942\n2003-07-30\t26312\n2003-07-31\t30395\n2003-08-01\t7566\n2003-09-01\t11412\n2003-09-02\t19481\n2003-09-03\t16354\n2003-09-04\t19376\n2003-09-05\t17778\n2003-09-06\t15703\n2003-09-07\t15184\n2003-09-08\t17329\n2003-09-09\t11812\n2003-09-10\t11441\n2003-09-11\t10434\n2003-09-12\t12148\n2003-09-13\t9415\n2003-09-14\t8891\n2003-09-15\t10579\n2003-09-16\t8953\n2003-09-17\t10747\n2003-09-18\t10015\n2003-09-19\t10567\n2003-09-20\t8765\n2003-09-21\t7609\n2003-09-22\t9584\n2003-09-23\t9187\n2003-09-24\t8692\n2003-09-25\t9311\n2003-09-26\t8610\n2003-09-27\t7252\n2003-09-28\t8341\n2003-09-29\t7478\n2003-09-30\t7415\n2003-10-01\t7255\n2003-10-02\t7064\n2003-10-03\t7649\n2003-10-04\t5487\n2003-10-05\t6541\n2003-10-06\t6934\n2003-10-07\t7860\n2003-10-08\t7295\n2003-10-09\t8150\n2003-10-10\t12405\n2003-10-11\t8214\n2003-10-12\t12826\n2003-10-13\t8410\n2003-10-14\t7928\n2003-10-15\t7805\n2003-10-16\t9090\n2003-10-17\t13420\n2003-10-18\t9902\n2003-10-19\t8197\n2003-10-20\t11596\n2003-10-21\t11306\n2003-10-22\t11890\n2003-10-23\t9965\n2003-10-24\t9609\n2003-10-25\t7395\n2003-10-26\t7576\n2003-10-27\t9795\n2003-10-28\t9847\n2003-10-29\t9155\n2003-10-30\t9248\n2003-10-31\t9290\n2003-11-01\t8037\n2003-11-02\t7950\n2003-11-03\t8968\n2003-11-04\t12372\n2003-11-05\t8444\n2003-11-06\t8465\n2003-11-07\t8529\n2003-11-08\t7546\n2003-11-09\t7035\n2003-11-10\t8666\n2003-11-11\t9764\n2003-11-12\t9639\n2003-11-13\t10155\n2003-11-14\t9522\n2003-11-15\t7933\n2003-11-16\t7597\n2003-11-17\t9456\n2003-11-18\t9623\n2003-11-19\t23667\n2003-11-20\t14780\n2003-11-21\t12924\n2003-11-22\t10016\n2003-11-23\t9584\n2003-11-24\t11046\n2003-11-25\t11373\n2003-11-26\t11706\n2003-11-27\t4095\n"
      },
      "dateCreated": "Aug 18, 2015 2:11:02 AM",
      "dateStarted": "Aug 22, 2015 10:46:27 PM",
      "dateFinished": "Aug 22, 2015 10:47:00 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// This functions converts a IP String in its Numeric representation\n// Similar to MySQL Function INET_ATON: https://dev.mysql.com/doc/refman/5.0/en/miscellaneous-functions.html#function_inet-aton\n    def ipToNumber(ipAddr: String): Long \u003d {\n      try {\n        val parts \u003d ipAddr.split(\"\\\\.\")\n        parts(3).toLong + (parts(2).toLong * 256L) + (parts(1).toLong * 256L * 256L) + (parts(0).toLong * 256L * 256L * 256L)\n      } catch {\n        case e: Exception \u003d\u003e {\n          e.printStackTrace\n          0\n        }\n      }\n    }\n\n// Register the new Function to the SQLContext\nsqlContext.udf.register(\"INET_ATON\", (ip:String) \u003d\u003e ipToNumber(ip))\n\n\nval ipCSV \u003d sc.textFile(\"/opt/dataset/ipligence-lite.csv\")\n\ncase class IP(ipFrom: Long, ipTo: Long, country: String)\n\nval ips \u003d ipCSV.map { line \u003d\u003e\n      val values \u003d line.split(\",\")\n      IP(ipFrom \u003d values(0).replace(\"\\\"\", \"\").toLong,\n        ipTo \u003d values(1).replace(\"\\\"\", \"\").toLong,\n        country \u003d values(2).replace(\"\\\"\", \"\"))\n    }\n\n    val ipsDF \u003d ips.toDF\n    ipsDF.registerTempTable(\"ips\")\n    sqlContext.cacheTable(\"ips\")\n    \n    ",
      "dateUpdated": "Aug 22, 2015 11:17:03 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440277668918_1145059537",
      "id": "20150822-210748_1256698294",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "ipToNumber: (ipAddr: String)Long\nres29: org.apache.spark.sql.UserDefinedFunction \u003d UserDefinedFunction(\u003cfunction1\u003e,LongType)\nipCSV: org.apache.spark.rdd.RDD[String] \u003d MapPartitionsRDD[21] at textFile at \u003cconsole\u003e:28\ndefined class IP\nips: org.apache.spark.rdd.RDD[IP] \u003d MapPartitionsRDD[22] at map at \u003cconsole\u003e:31\nipsDF: org.apache.spark.sql.DataFrame \u003d [ipFrom: bigint, ipTo: bigint, country: string]\n"
      },
      "dateCreated": "Aug 22, 2015 9:07:48 PM",
      "dateStarted": "Aug 22, 2015 10:46:29 PM",
      "dateFinished": "Aug 22, 2015 10:47:01 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql SELECT remoteIP, COUNT(1) AS count\nFROM logs\nGROUP BY remoteIP\nORDER BY count DESC\nLIMIT 5",
      "dateUpdated": "Aug 22, 2015 11:27:19 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "pieChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "remoteIP",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "count",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "remoteIP",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1439863845009_157667393",
      "id": "20150818-021045_1000063185",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "remoteIP\tcount\n69.10.137.199\t48359\n207.166.200.224\t14232\n12.119.251.194\t8640\n69.28.130.230\t5926\n209.217.26.22\t5341\n"
      },
      "dateCreated": "Aug 18, 2015 2:10:45 AM",
      "dateStarted": "Aug 22, 2015 10:47:00 PM",
      "dateFinished": "Aug 22, 2015 10:47:25 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql \nSELECT ips.country\nFROM logs INNER JOIN ips\n    ON \n    ips.ipFrom \u003c\u003d INET_ATON(logs.remoteIP) AND \n    ips.ipTo \u003e\u003d INET_ATON(logs.remoteIP)\nLIMIT 10",
      "dateUpdated": "Aug 22, 2015 11:27:20 PM",
      "config": {
        "colWidth": 6.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "country",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "country",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "tableHide": false,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440277856174_609366475",
      "id": "20150822-211056_569859568",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "country\nUS\nGB\nUS\nCA\nUS\nUS\nNL\nCA\nUS\nUS\n"
      },
      "dateCreated": "Aug 22, 2015 9:10:56 PM",
      "dateStarted": "Aug 22, 2015 11:27:12 PM",
      "dateFinished": "Aug 22, 2015 11:27:12 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Aug 22, 2015 10:45:52 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1440282956044_-1934360175",
      "id": "20150822-223556_1799188434",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT"
      },
      "dateCreated": "Aug 22, 2015 10:35:56 PM",
      "dateStarted": "Aug 22, 2015 10:47:26 PM",
      "dateFinished": "Aug 22, 2015 10:50:30 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "AccessLog",
  "id": "2AYDJMVVQ",
  "angularObjects": {
    "2AW9XG87T": [],
    "2AYFF1FBK": [],
    "2AVKD7B62": [],
    "2AUZT3WKD": [],
    "2AV7D2YDP": [],
    "2AXRFPPT4": [],
    "2AV9EFM3M": [],
    "2AVTG1HU3": [],
    "2AVJ6KFYN": [],
    "2AV4ZJ7GG": [],
    "2AWDJ3UKM": [],
    "2AVNKY1DA": []
  },
  "config": {},
  "info": {}
}